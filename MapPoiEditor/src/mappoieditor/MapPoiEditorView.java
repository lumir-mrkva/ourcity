/*
 * MapPoiEditorView.java
 */

package mappoieditor;

import java.awt.Graphics;
import java.awt.Point;
import org.jdesktop.application.Action;
import org.jdesktop.application.ResourceMap;
import org.jdesktop.application.SingleFrameApplication;
import org.jdesktop.application.FrameView;
import org.jdesktop.application.TaskMonitor;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.image.BufferedImage;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.io.IOException;
import java.util.Properties;
import javax.imageio.ImageIO;
import javax.swing.Timer;
import javax.swing.Icon;
import javax.swing.ImageIcon;
import javax.swing.JFileChooser;
import javax.swing.JFrame;
import javax.swing.JLabel;
import javax.swing.JOptionPane;

/**
 * The application's main frame.
 */
public class MapPoiEditorView extends FrameView {
    // files
    File mapFile;
    File xmlFile;
    File iniFile;
    
    public MapPoiEditorView(SingleFrameApplication app) {
        super(app);
        try {
        mapFile = new File("map.png");        
        } catch (Exception e) {
            System.out.println("Cannot load map");   
        }
        xmlFile = new File("map.xml");
        iniFile = new File("map.ini");   
        
        initComponents();

        // status bar initialization - message timeout, idle icon and busy animation, etc
        ResourceMap resourceMap = getResourceMap();
        int messageTimeout = resourceMap.getInteger("StatusBar.messageTimeout");
        messageTimer = new Timer(messageTimeout, new ActionListener() {
            public void actionPerformed(ActionEvent e) {
                statusMessageLabel.setText("");
            }
        });
        messageTimer.setRepeats(false);
        int busyAnimationRate = resourceMap.getInteger("StatusBar.busyAnimationRate");
        for (int i = 0; i < busyIcons.length; i++) {
            busyIcons[i] = resourceMap.getIcon("StatusBar.busyIcons[" + i + "]");
        }
        busyIconTimer = new Timer(busyAnimationRate, new ActionListener() {
            public void actionPerformed(ActionEvent e) {
                busyIconIndex = (busyIconIndex + 1) % busyIcons.length;
                statusMousePosition.setIcon(busyIcons[busyIconIndex]);
            }
        });
        idleIcon = resourceMap.getIcon("StatusBar.idleIcon");
        statusMousePosition.setIcon(idleIcon);

        // connecting action tasks to status bar via TaskMonitor
        TaskMonitor taskMonitor = new TaskMonitor(getApplication().getContext());
        taskMonitor.addPropertyChangeListener(new java.beans.PropertyChangeListener() {
            public void propertyChange(java.beans.PropertyChangeEvent evt) {
                String propertyName = evt.getPropertyName();
                if ("started".equals(propertyName)) {
                    if (!busyIconTimer.isRunning()) {
                        statusMousePosition.setIcon(busyIcons[0]);
                        busyIconIndex = 0;
                        busyIconTimer.start();
                    }
                } else if ("done".equals(propertyName)) {
                    busyIconTimer.stop();
                    statusMousePosition.setIcon(idleIcon);
                } else if ("message".equals(propertyName)) {
                    String text = (String)(evt.getNewValue());
                    statusMessageLabel.setText((text == null) ? "" : text);
                    messageTimer.restart();
                } else if ("progress".equals(propertyName)) {
                    int value = (Integer)(evt.getNewValue());
                }
            }
        });
        this.init();
    }
    
    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        mainPanel = new javax.swing.JPanel();
        jToolBar1 = new javax.swing.JToolBar();
        deletePoi = new javax.swing.JButton();
        connectPoi = new javax.swing.JButton();
        makePoiStartPoint = new javax.swing.JButton();
        jButton5 = new javax.swing.JButton();
        jButton4 = new javax.swing.JButton();
        jSeparator1 = new javax.swing.JToolBar.Separator();
        jLabel8 = new javax.swing.JLabel();
        jRadioButton1 = new javax.swing.JRadioButton();
        jRadioButton2 = new javax.swing.JRadioButton();
        jRadioButton3 = new javax.swing.JRadioButton();
        mapScrollPanel = new javax.swing.JScrollPane();
        filler1 = new javax.swing.Box.Filler(new java.awt.Dimension(0, 0), new java.awt.Dimension(0, 0), new java.awt.Dimension(32767, 32767));
        menuBar = new javax.swing.JMenuBar();
        javax.swing.JMenu fileMenu = new javax.swing.JMenu();
        loadMap = new javax.swing.JMenuItem();
        javax.swing.JMenuItem exitMenuItem = new javax.swing.JMenuItem();
        xmlFileMenu = new javax.swing.JMenu();
        loadXMLFileMenuItem = new javax.swing.JMenuItem();
        saveXMLFileMenuItem = new javax.swing.JMenuItem();
        mapSettingsMenu = new javax.swing.JMenu();
        statusPanel = new javax.swing.JPanel();
        javax.swing.JSeparator statusPanelSeparator = new javax.swing.JSeparator();
        statusMessageLabel = new javax.swing.JLabel();
        statusMousePosition = new javax.swing.JLabel();
        mapSettings = new javax.swing.JDialog();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();
        jButton1 = new javax.swing.JButton();
        jButton2 = new javax.swing.JButton();
        jButton3 = new javax.swing.JButton();
        leftDownCornerXText = new javax.swing.JTextField();
        leftDownCornerZText = new javax.swing.JTextField();
        mapHeightText = new javax.swing.JTextField();
        mapWidthText = new javax.swing.JTextField();
        zeroLevelYText = new javax.swing.JTextField();
        firstLevelYText = new javax.swing.JTextField();
        secondLevelYText = new javax.swing.JTextField();
        buttonGroup1 = new javax.swing.ButtonGroup();

        mainPanel.setName("mainPanel"); // NOI18N

        jToolBar1.setRollover(true);
        jToolBar1.setName("toolBar"); // NOI18N

        javax.swing.ActionMap actionMap = org.jdesktop.application.Application.getInstance(mappoieditor.MapPoiEditorApp.class).getContext().getActionMap(MapPoiEditorView.class, this);
        deletePoi.setAction(actionMap.get("deletePOIDialog")); // NOI18N
        org.jdesktop.application.ResourceMap resourceMap = org.jdesktop.application.Application.getInstance(mappoieditor.MapPoiEditorApp.class).getContext().getResourceMap(MapPoiEditorView.class);
        deletePoi.setText(resourceMap.getString("deletePoi.text")); // NOI18N
        deletePoi.setFocusable(false);
        deletePoi.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        deletePoi.setName("deletePoi"); // NOI18N
        deletePoi.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        jToolBar1.add(deletePoi);

        connectPoi.setAction(actionMap.get("connectPoiDialog")); // NOI18N
        connectPoi.setText(resourceMap.getString("connectPoi.text")); // NOI18N
        connectPoi.setFocusable(false);
        connectPoi.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        connectPoi.setName("connectPoi"); // NOI18N
        connectPoi.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        jToolBar1.add(connectPoi);

        makePoiStartPoint.setAction(actionMap.get("makePoiStartDialog")); // NOI18N
        makePoiStartPoint.setText(resourceMap.getString("makePoiStartPoint.text")); // NOI18N
        makePoiStartPoint.setFocusable(false);
        makePoiStartPoint.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        makePoiStartPoint.setName("makePoiStartPoint"); // NOI18N
        makePoiStartPoint.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        jToolBar1.add(makePoiStartPoint);

        jButton5.setAction(actionMap.get("makeWaypointDialog")); // NOI18N
        jButton5.setText(resourceMap.getString("jButton5.text")); // NOI18N
        jButton5.setFocusable(false);
        jButton5.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        jButton5.setName("jButton5"); // NOI18N
        jButton5.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        jToolBar1.add(jButton5);

        jButton4.setAction(actionMap.get("redrawAction")); // NOI18N
        jButton4.setText(resourceMap.getString("jButton4.text")); // NOI18N
        jButton4.setFocusable(false);
        jButton4.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        jButton4.setName("jButton4"); // NOI18N
        jButton4.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        jToolBar1.add(jButton4);

        jSeparator1.setName("jSeparator1"); // NOI18N
        jToolBar1.add(jSeparator1);

        jLabel8.setText(resourceMap.getString("jLabel8.text")); // NOI18N
        jLabel8.setName("jLabel8"); // NOI18N
        jToolBar1.add(jLabel8);

        jRadioButton1.setAction(actionMap.get("zeroLevelSelected")); // NOI18N
        buttonGroup1.add(jRadioButton1);
        jRadioButton1.setText(resourceMap.getString("jRadioButton1.text")); // NOI18N
        jRadioButton1.setFocusable(false);
        jRadioButton1.setHorizontalTextPosition(javax.swing.SwingConstants.RIGHT);
        jRadioButton1.setName("jRadioButton1"); // NOI18N
        jRadioButton1.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        jToolBar1.add(jRadioButton1);

        jRadioButton2.setAction(actionMap.get("firstLevelSelected")); // NOI18N
        buttonGroup1.add(jRadioButton2);
        jRadioButton2.setSelected(true);
        jRadioButton2.setText(resourceMap.getString("jRadioButton2.text")); // NOI18N
        jRadioButton2.setFocusable(false);
        jRadioButton2.setHorizontalTextPosition(javax.swing.SwingConstants.RIGHT);
        jRadioButton2.setName("jRadioButton2"); // NOI18N
        jRadioButton2.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        jToolBar1.add(jRadioButton2);

        jRadioButton3.setAction(actionMap.get("secondLevelSelected")); // NOI18N
        buttonGroup1.add(jRadioButton3);
        jRadioButton3.setText(resourceMap.getString("jRadioButton3.text")); // NOI18N
        jRadioButton3.setFocusable(false);
        jRadioButton3.setHorizontalTextPosition(javax.swing.SwingConstants.RIGHT);
        jRadioButton3.setName("jRadioButton3"); // NOI18N
        jRadioButton3.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        jToolBar1.add(jRadioButton3);

        mapScrollPanel.setName("mapScrollPanel"); // NOI18N

        filler1.setName("filler1"); // NOI18N
        filler1.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                filler1MouseClicked(evt);
            }
        });
        filler1.addMouseMotionListener(new java.awt.event.MouseMotionAdapter() {
            public void mouseMoved(java.awt.event.MouseEvent evt) {
                filler1MouseMoved(evt);
            }
        });
        mapScrollPanel.setViewportView(filler1);

        javax.swing.GroupLayout mainPanelLayout = new javax.swing.GroupLayout(mainPanel);
        mainPanel.setLayout(mainPanelLayout);
        mainPanelLayout.setHorizontalGroup(
            mainPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jToolBar1, javax.swing.GroupLayout.DEFAULT_SIZE, 621, Short.MAX_VALUE)
            .addComponent(mapScrollPanel, javax.swing.GroupLayout.DEFAULT_SIZE, 621, Short.MAX_VALUE)
        );
        mainPanelLayout.setVerticalGroup(
            mainPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(mainPanelLayout.createSequentialGroup()
                .addComponent(jToolBar1, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(mapScrollPanel, javax.swing.GroupLayout.DEFAULT_SIZE, 386, Short.MAX_VALUE))
        );

        menuBar.setName("menuBar"); // NOI18N

        fileMenu.setAction(actionMap.get("showLoadImageDialog")); // NOI18N
        fileMenu.setText(resourceMap.getString("fileMenu.text")); // NOI18N
        fileMenu.setName("fileMenu"); // NOI18N
        fileMenu.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                fileMenuActionPerformed(evt);
            }
        });

        loadMap.setAction(actionMap.get("loadImageFromFile")); // NOI18N
        loadMap.setText(resourceMap.getString("loadMap.text")); // NOI18N
        loadMap.setName("loadMap"); // NOI18N
        fileMenu.add(loadMap);

        exitMenuItem.setAction(actionMap.get("quit")); // NOI18N
        exitMenuItem.setName("exitMenuItem"); // NOI18N
        fileMenu.add(exitMenuItem);

        menuBar.add(fileMenu);

        xmlFileMenu.setText(resourceMap.getString("xmlFileMenu.text")); // NOI18N
        xmlFileMenu.setName("xmlFileMenu"); // NOI18N

        loadXMLFileMenuItem.setAction(actionMap.get("loadXMLFileDialog")); // NOI18N
        loadXMLFileMenuItem.setText(resourceMap.getString("loadXMLFileMenuItem.text")); // NOI18N
        loadXMLFileMenuItem.setName("loadXMLFileMenuItem"); // NOI18N
        xmlFileMenu.add(loadXMLFileMenuItem);

        saveXMLFileMenuItem.setAction(actionMap.get("saveXMLFileDialog")); // NOI18N
        saveXMLFileMenuItem.setText(resourceMap.getString("saveXMLFileMenuItem.text")); // NOI18N
        saveXMLFileMenuItem.setName("saveXMLFileMenuItem"); // NOI18N
        xmlFileMenu.add(saveXMLFileMenuItem);

        menuBar.add(xmlFileMenu);

        mapSettingsMenu.setAction(actionMap.get("showSettingsMapDialog")); // NOI18N
        mapSettingsMenu.setText(resourceMap.getString("mapSettingsMenu.text")); // NOI18N
        mapSettingsMenu.setName("mapSettingsMenu"); // NOI18N
        mapSettingsMenu.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                mapSettingsMenuMouseClicked(evt);
            }
        });
        mapSettingsMenu.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                mapSettingsMenuActionPerformed(evt);
            }
        });
        menuBar.add(mapSettingsMenu);

        statusPanel.setName("statusPanel"); // NOI18N

        statusPanelSeparator.setName("statusPanelSeparator"); // NOI18N

        statusMessageLabel.setName("statusMessageLabel"); // NOI18N

        statusMousePosition.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        statusMousePosition.setName("statusMousePosition"); // NOI18N

        javax.swing.GroupLayout statusPanelLayout = new javax.swing.GroupLayout(statusPanel);
        statusPanel.setLayout(statusPanelLayout);
        statusPanelLayout.setHorizontalGroup(
            statusPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(statusPanelSeparator, javax.swing.GroupLayout.DEFAULT_SIZE, 621, Short.MAX_VALUE)
            .addGroup(statusPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(statusMessageLabel)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 601, Short.MAX_VALUE)
                .addComponent(statusMousePosition)
                .addContainerGap())
        );
        statusPanelLayout.setVerticalGroup(
            statusPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(statusPanelLayout.createSequentialGroup()
                .addComponent(statusPanelSeparator, javax.swing.GroupLayout.PREFERRED_SIZE, 2, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(statusPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(statusMessageLabel)
                    .addComponent(statusMousePosition))
                .addGap(3, 3, 3))
        );

        mapSettings.setTitle(resourceMap.getString("mapSettings.title")); // NOI18N
        mapSettings.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        mapSettings.setModalityType(java.awt.Dialog.ModalityType.APPLICATION_MODAL);
        mapSettings.setName("mapSettings"); // NOI18N
        mapSettings.setType(java.awt.Window.Type.UTILITY);

        jLabel1.setText(resourceMap.getString("jLabel1.text")); // NOI18N
        jLabel1.setName("jLabel1"); // NOI18N

        jLabel2.setText(resourceMap.getString("jLabel2.text")); // NOI18N
        jLabel2.setName("jLabel2"); // NOI18N

        jLabel3.setText(resourceMap.getString("jLabel3.text")); // NOI18N
        jLabel3.setName("jLabel3"); // NOI18N

        jLabel4.setText(resourceMap.getString("jLabel4.text")); // NOI18N
        jLabel4.setName("jLabel4"); // NOI18N

        jLabel5.setText(resourceMap.getString("jLabel5.text")); // NOI18N
        jLabel5.setName("jLabel5"); // NOI18N

        jLabel6.setText(resourceMap.getString("jLabel6.text")); // NOI18N
        jLabel6.setName("jLabel6"); // NOI18N

        jLabel7.setText(resourceMap.getString("jLabel7.text")); // NOI18N
        jLabel7.setName("jLabel7"); // NOI18N

        jButton1.setAction(actionMap.get("loadMapCfgFileDialog")); // NOI18N
        jButton1.setText(resourceMap.getString("jButton1.text")); // NOI18N
        jButton1.setName("jButton1"); // NOI18N

        jButton2.setAction(actionMap.get("saveMapCfgFileDialog")); // NOI18N
        jButton2.setText(resourceMap.getString("jButton2.text")); // NOI18N
        jButton2.setName("jButton2"); // NOI18N

        jButton3.setAction(actionMap.get("applyMapCfg")); // NOI18N
        jButton3.setText(resourceMap.getString("jButton3.text")); // NOI18N
        jButton3.setName("jButton3"); // NOI18N

        leftDownCornerXText.setText(resourceMap.getString("leftDownCornerXText.text")); // NOI18N
        leftDownCornerXText.setName("leftDownCornerXText"); // NOI18N

        leftDownCornerZText.setText(resourceMap.getString("leftDownCornerZText.text")); // NOI18N
        leftDownCornerZText.setName("leftDownCornerZText"); // NOI18N

        mapHeightText.setText(resourceMap.getString("mapHeightText.text")); // NOI18N
        mapHeightText.setName("mapHeightText"); // NOI18N

        mapWidthText.setText(resourceMap.getString("mapWidthText.text")); // NOI18N
        mapWidthText.setName("mapWidthText"); // NOI18N

        zeroLevelYText.setText(resourceMap.getString("zeroLevelYText.text")); // NOI18N
        zeroLevelYText.setName("zeroLevelYText"); // NOI18N

        firstLevelYText.setText(resourceMap.getString("firstLevelYText.text")); // NOI18N
        firstLevelYText.setName("firstLevelYText"); // NOI18N

        secondLevelYText.setText(resourceMap.getString("secondLevelYText.text")); // NOI18N
        secondLevelYText.setName("secondLevelYText"); // NOI18N

        javax.swing.GroupLayout mapSettingsLayout = new javax.swing.GroupLayout(mapSettings.getContentPane());
        mapSettings.getContentPane().setLayout(mapSettingsLayout);
        mapSettingsLayout.setHorizontalGroup(
            mapSettingsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(mapSettingsLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(mapSettingsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(mapSettingsLayout.createSequentialGroup()
                        .addComponent(jButton1)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jButton2)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jButton3))
                    .addGroup(mapSettingsLayout.createSequentialGroup()
                        .addGroup(mapSettingsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel1)
                            .addComponent(jLabel2)
                            .addComponent(jLabel3)
                            .addComponent(jLabel4)
                            .addComponent(jLabel5)
                            .addComponent(jLabel6)
                            .addComponent(jLabel7))
                        .addGap(51, 51, 51)
                        .addGroup(mapSettingsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(secondLevelYText, javax.swing.GroupLayout.PREFERRED_SIZE, 170, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(firstLevelYText, javax.swing.GroupLayout.PREFERRED_SIZE, 170, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(zeroLevelYText, javax.swing.GroupLayout.PREFERRED_SIZE, 170, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(mapWidthText, javax.swing.GroupLayout.PREFERRED_SIZE, 170, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(mapHeightText, javax.swing.GroupLayout.PREFERRED_SIZE, 170, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(leftDownCornerZText, javax.swing.GroupLayout.PREFERRED_SIZE, 170, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(leftDownCornerXText, javax.swing.GroupLayout.PREFERRED_SIZE, 170, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        mapSettingsLayout.setVerticalGroup(
            mapSettingsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(mapSettingsLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(mapSettingsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(leftDownCornerXText, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(mapSettingsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(leftDownCornerZText, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(mapSettingsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel3)
                    .addComponent(mapHeightText, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(mapSettingsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel4)
                    .addComponent(mapWidthText, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(mapSettingsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel5)
                    .addComponent(zeroLevelYText, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(mapSettingsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel6)
                    .addComponent(firstLevelYText, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(mapSettingsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel7)
                    .addComponent(secondLevelYText, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(mapSettingsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButton1)
                    .addComponent(jButton2)
                    .addComponent(jButton3))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        jLabel3.getAccessibleContext().setAccessibleName(resourceMap.getString("jLabel3.AccessibleContext.accessibleName")); // NOI18N

        setComponent(mainPanel);
        setMenuBar(menuBar);
        setStatusBar(statusPanel);
        setToolBar(jToolBar1);
    }// </editor-fold>//GEN-END:initComponents

private void mapSettingsMenuActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_mapSettingsMenuActionPerformed
// TODO add your handling code here:
    MapPoiEditorApp.getApplication().show(mapSettings);    
}//GEN-LAST:event_mapSettingsMenuActionPerformed

private void mapSettingsMenuMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_mapSettingsMenuMouseClicked
// TODO add your handling code here:
    MapPoiEditorApp.getApplication().show(mapSettings);        
}//GEN-LAST:event_mapSettingsMenuMouseClicked

private void fileMenuActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_fileMenuActionPerformed
// TODO add your handling code here:
}//GEN-LAST:event_fileMenuActionPerformed

private void filler1MouseMoved(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_filler1MouseMoved
// TODO add your handling code here:
    updateMousePosition();
}//GEN-LAST:event_filler1MouseMoved

private void filler1MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_filler1MouseClicked
// TODO add your handling code here:
}//GEN-LAST:event_filler1MouseClicked


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.ButtonGroup buttonGroup1;
    private javax.swing.JButton connectPoi;
    private javax.swing.JButton deletePoi;
    private javax.swing.Box.Filler filler1;
    private javax.swing.JTextField firstLevelYText;
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JButton jButton3;
    private javax.swing.JButton jButton4;
    private javax.swing.JButton jButton5;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JRadioButton jRadioButton1;
    private javax.swing.JRadioButton jRadioButton2;
    private javax.swing.JRadioButton jRadioButton3;
    private javax.swing.JToolBar.Separator jSeparator1;
    private javax.swing.JToolBar jToolBar1;
    private javax.swing.JTextField leftDownCornerXText;
    private javax.swing.JTextField leftDownCornerZText;
    private javax.swing.JMenuItem loadMap;
    private javax.swing.JMenuItem loadXMLFileMenuItem;
    private javax.swing.JPanel mainPanel;
    private javax.swing.JButton makePoiStartPoint;
    private javax.swing.JTextField mapHeightText;
    private javax.swing.JScrollPane mapScrollPanel;
    private javax.swing.JDialog mapSettings;
    private javax.swing.JMenu mapSettingsMenu;
    private javax.swing.JTextField mapWidthText;
    private javax.swing.JMenuBar menuBar;
    private javax.swing.JMenuItem saveXMLFileMenuItem;
    private javax.swing.JTextField secondLevelYText;
    private javax.swing.JLabel statusMessageLabel;
    private javax.swing.JLabel statusMousePosition;
    private javax.swing.JPanel statusPanel;
    private javax.swing.JMenu xmlFileMenu;
    private javax.swing.JTextField zeroLevelYText;
    // End of variables declaration//GEN-END:variables

    private final Timer messageTimer;
    private final Timer busyIconTimer;
    private final Icon idleIcon;
    private final Icon[] busyIcons = new Icon[15];
    private int busyIconIndex = 0;
    
    private JLabel mapLabel;
    private ImageIcon mapImage;
    private MapObject map; // poi, lines, waypoints
    private File mapImgFile;
    
    @Action
    public void loadImageFromFile() {
        String filename = File.separator+"png";
        JFileChooser fc = new JFileChooser(new File(filename));

        JFrame mainFrame = MapPoiEditorApp.getApplication().getMainFrame();
        fc.showOpenDialog(mainFrame);
        mapFile = fc.getSelectedFile(); 
        statusMessageLabel.setText("Loading map file: "+mapFile.getName());
        this.mapImgFile = mapFile;
        this.redraw();
    }
    
    @Action
    public void loadXMLFileDialog() {
        String filename = File.separator+"xml";
        JFileChooser fc = new JFileChooser(new File(filename));

        JFrame mainFrame = MapPoiEditorApp.getApplication().getMainFrame();
        fc.showOpenDialog(mainFrame);
        xmlFile = fc.getSelectedFile();        
        this.loadXML(xmlFile);
        this.redraw();
    }    
    
    @Action
    public void saveXMLFileDialog() {
        String filename = File.separator+"xml";
        JFileChooser fc = new JFileChooser(new File(filename));

        JFrame mainFrame = MapPoiEditorApp.getApplication().getMainFrame();
        fc.showSaveDialog(mainFrame);
        xmlFile = fc.getSelectedFile();        
        this.saveXML(xmlFile);
    }
    
    @Action
    public void loadMapCfgFileDialog() {
        String filename = File.separator+"ini";
        JFileChooser fc = new JFileChooser(new File(filename));

        JFrame mainFrame = MapPoiEditorApp.getApplication().getMainFrame();
        fc.showOpenDialog(mainFrame);
        iniFile = fc.getSelectedFile();                
        parseMapCfg();
    }    
    
    public boolean parseMapCfg () {        
        try{
          Properties p = new Properties();
          p.load(new FileInputStream(iniFile));
            zeroLevelYText.setText(String.valueOf(this.map.zeroLevelY));
            this.map.firstLevelY = Float.valueOf( p.getProperty("firstLevelY"));
            firstLevelYText.setText(String.valueOf(this.map.firstLevelY));
            this.map.secondLevelY = Float.valueOf( p.getProperty("secondLevelY"));
            secondLevelYText.setText(String.valueOf(this.map.secondLevelY));

            this.map.mapImgWidth = Float.valueOf( p.getProperty("mapWidth"));
            mapWidthText.setText(String.valueOf(this.map.mapImgWidth));
            this.map.mapImgHeight = Float.valueOf( p.getProperty("mapHeight"));     
            mapHeightText.setText(String.valueOf(this.map.mapImgHeight));
            p.list(System.out);
            this.applyMapCfg();
            statusMessageLabel.setText("Ini file loaded h:" + this.map.mapImgHeight + " w:" + this.map.mapImgWidth);        
            return true;
          }
        catch (Exception e) {
          statusMessageLabel.setText("Error while loading ini file: " + e.getMessage());
          return false;
        }        
    }
    
    @Action
    public void saveMapCfgFileDialog() {
        String filename = File.separator+"ini";
        JFileChooser fc = new JFileChooser(new File(filename));

        JFrame mainFrame = MapPoiEditorApp.getApplication().getMainFrame();
        fc.showSaveDialog(mainFrame);
        iniFile = fc.getSelectedFile();                
        try{
          Properties p = new Properties();

          p.put("zeroLevelY", zeroLevelYText.getText());
          p.put("firstLevelY", firstLevelYText.getText());
          p.put("secondLevelY", secondLevelYText.getText());

          p.put("leftDownCornerX", leftDownCornerXText.getText());
          p.put("leftDownCornerZ", leftDownCornerZText.getText());

          p.put("mapWidth", mapWidthText.getText());
          p.put("mapHeight", mapHeightText.getText());

          FileOutputStream out = new FileOutputStream(iniFile);
          p.store(out, "/* map properties updated */");
          p.list(System.out);
          }
        catch (Exception e) {
          statusMessageLabel.setText("Error while saving ini file: " + e.getMessage());
          }            
        statusMessageLabel.setText("Ini file saved.");
    }             
    
    @Action
    public void applyMapCfg () {
        this.map.zeroLevelY = Float.valueOf(zeroLevelYText.getText());
        this.map.firstLevelY = Float.valueOf(firstLevelYText.getText());
        this.map.secondLevelY = Float.valueOf(secondLevelYText.getText());

        this.map.mapImgWidth = Float.valueOf(mapWidthText.getText());
        this.map.mapImgHeight = Float.valueOf(mapHeightText.getText());    

        mapSettings.dispose();
    }
  
    public void createMapLabel () throws IOException {
      BufferedImage img = null;
      img = ImageIO.read(this.mapFile);
      mapImage = new ImageIcon( img );
      mapLabel = new JLabel(mapImage);
        mapLabel.addMouseMotionListener(new java.awt.event.MouseMotionAdapter() {
            public void mouseMoved(java.awt.event.MouseEvent evt) {
                updateMousePosition();
            }                
        });
          mapLabel.addMouseListener(new java.awt.event.MouseAdapter() {
                public void mouseClicked(java.awt.event.MouseEvent evt) {
                    handleMouseClicked(evt);
                }
            });            
      mapScrollPanel.getViewport ().add (mapLabel);                 
    }
    
    public void redraw() {
      BufferedImage img = null;
      try {    
                    
          img = ImageIO.read(this.mapFile);
          
          if (this.mapLabel == null) {
              this.createMapLabel();
          }
          
          Graphics g = img.getGraphics();
          this.mapImage.setImage(img);                      
          this.map.redraw(g);                    
          this.mapLabel.repaint();         
      } catch (IOException ie) {      
        statusMessageLabel.setText("Error:"+ie.getMessage());
      }
    }     
    
    public void saveXML(File file) {
        XMLHandler.save(this.map, file);
    }
    
    public void loadXML(File file) {
        if (file == null) file = this.xmlFile;
        statusMessageLabel.setText("Loading xml file ...");
        this.map = XMLHandler.load(file);
        statusMessageLabel.setText(statusMessageLabel.getText() + " done, building map ...");
        this.map.build();
        statusMessageLabel.setText(statusMessageLabel.getText() + " done.");
    }         
    
    public void updateMousePosition() {
        try {
            Point location = mapLabel.getMousePosition();        
            this.map.mapImgHeight = this.mapLabel.getHeight();
            this.map.mapImgWidth = this.mapLabel.getWidth();    
            int realX = location.x;
            int realY = location.y;
            float z = this.map.getGameZ(realX);
            float x = this.map.getGameX(realY);
            float y = this.map.getGameY();
            statusMousePosition.setText("X: " + x + " Z: " + z +  " Y: " + y + " (x:" + realX + ", y:" + realY + ")");        
        }  catch (Exception e) {      
            statusMousePosition.setText("Map not loaded.");
        }
    }
    
    public void handleMouseClicked(java.awt.event.MouseEvent evt) {
        int realX = evt.getX();
        int realY = evt.getY();
        float z = this.map.getGameZ(realX);
        float x = this.map.getGameX(realY);
        float y = this.map.getGameY();
        this.map.mapImgHeight = this.mapLabel.getHeight();
        this.map.mapImgWidth = this.mapLabel.getWidth();                  
        // TODO: handle action depend on poi action
        System.out.println("adding poi to (x:" + x + "f, y:" + y + "f, z:" + z + "f)");
        this.map.addPOI(x, y, z, realX, realY);
        this.redraw();
    }        
    
    public MapObject getMap() {
        if (this.map == null) {
            this.map = new MapObject();
        }
        return this.map;
    }

    @Action
    public void deletePOIDialog() {
        String str = JOptionPane.showInputDialog(null, "Enter identifier of POI to delete : ", "Delete POI", 1);
        if (this.map.deletePOI(Integer.parseInt( str ))) {
            JOptionPane.showMessageDialog(null, "POI not found.", "Delete POI", 1);
        } else {
            JOptionPane.showMessageDialog(null, "POI deleted.", "Delete POI", 1);
            this.redraw();
        }        
    }

    @Action
    public void zeroLevelSelected() {
        this.map.selectedLevel = 0;
    }

    @Action
    public void firstLevelSelected() {
        this.map.selectedLevel = 1;
    }

    @Action
    public void secondLevelSelected() {
        this.map.selectedLevel = 2;
    }

    @Action
    public void redrawAction() {
        this.redraw();
    }
    
    public void init() {
        this.map = new MapObject();
        if (this.parseMapCfg()) {
            this.loadXML(this.xmlFile);
            this.redraw();        
        }
    }

    @Action
    public void makePoiStartDialog() {
        String str = JOptionPane.showInputDialog(null, "Enter identifier of POI to make start POI: ", "Start POI", 1);
        if (!this.map.makePOIStart(Integer.parseInt( str ))) {
            JOptionPane.showMessageDialog(null, "POI not found.", "Start POI", 1);
        } else {
            this.redraw();
        }        
    }

    @Action
    public void connectPoiDialog() {
        String str1 = JOptionPane.showInputDialog(null, "Enter from POI: ", "Connect POI", 1);
        String str2 = JOptionPane.showInputDialog(null, "Enter to POI: ", "Connect POI", 1);
        if (!this.map.connectPOIs(Integer.parseInt( str1 ), Integer.parseInt( str2 ))) {
            JOptionPane.showMessageDialog(null, "POIs not found.", "Start POI", 1);
        } else {
            this.redraw();
        }         
    }

    @Action
    public void makeWaypointDialog() {
        String str = JOptionPane.showInputDialog(null, "Enter POI to make waypoint: ", "Waupoint", 1);
        if (!this.map.makeWaypoint(Integer.parseInt( str ))) {
            JOptionPane.showMessageDialog(null, "POI not found.", "Waypoint", 1);
        } else {
            this.redraw();
        }          
    }
}
